function [mytracking, opts] = input_channels(fname)
% INPUT_CHANNELS displays a pop-up window for the user to manually identify the
% type of data contained in the different channels of a movie recording.
%
%   [MYTRACKING] = INPUT_CHANNELS(CHANNELS) displays the window using the data
%   contained in CHANNELS, updates it accordingly to the user's choice and returns
%   the adequate structure for later analysis MYTRACKING.
%
% Gonczy & Naef labs, EPFL
% Simon Blanchoud
% 13.05.2014

  if (nargin == 0 | isempty(fname))
    fname = convert_movie();
    fname = {fname};
  elseif (~iscell(fname))
    fname = {fname};
  end

  opts = get_struct('options');

  nchannels = length(fname);
  channels = get_struct('channel', [nchannels 1]);
  for i=1:nchannels
    channels(i).fname = fname{i};
  end

  [hFig, handles] = create_figure(channels);

  img = [];
  orig_img = [];
  img_next = [];

  set(hFig, 'UserData',  handles);
  set(hFig,'Visible', 'on');
  update_display(true, 1, 1);

  uiwait(hFig);

  handles = get(hFig, 'UserData');
  mytracking = get_struct('mytracking');
  mytracking.channels = channels;
  mytracking.experiment = get(handles.experiment, 'String');

  delete(hFig);
  drawnow;

  return;

  function empty(hObject, eventdata, handles)
    return
  end

  function list_Callback(hObject, eventdata, handles)

    update_display(gcbf, get(hObject,'Value'));
    return
  end

  function update_display(recompute, indx, nimg)

    handles = get(hFig,'UserData');

    prev_frame = handles.frame;

    handles.current = indx;
    if (nargin == 3)
      handles.frame = nimg;
    else
      nimg = handles.frame;
    end

    if (recompute)
      set(handles.uipanel,'Title', ['Channel ' num2str(indx)]);
      set(handles.detrend,'Value', channels(indx).detrend);
      set(handles.hot_pixels,'Value', channels(indx).hot_pixels);
      set(handles.normalize,'Value', channels(indx).normalize);
      set(handles.cosmics,'Value', channels(indx).cosmics);
      rgb_color = round(channels(indx).color * 255);
      set(handles.channel_color, 'String', ['<HTML><BODY bgcolor = "rgb(' num2str(rgb_color(1)) ', ' num2str(rgb_color(2)) ', ' num2str(rgb_color(3)) ')">green background</BODY></HTML>'])
      set(handles.channel_color, 'ForegroundColor', channels(indx).color);
      set(handles.channel_type, 'Value',  channels(indx).type);
      set(handles.compress, 'Value',  channels(indx).compression);
      set(handles.text, 'String', ['Frame #' num2str(nimg)]);

      set(hFig, 'Name', 'Channel Identification (Filtering...)');
      set(handles.all_buttons, 'Enable', 'off');
      drawnow;
      refresh(hFig);

      if (prev_frame == nimg-1)
        orig_img = img_next;
        img_next = double(load_data(channels(indx).fname, nimg+1));
      elseif (prev_frame == nimg+1)
        img_next = orig_img;
        orig_img = double(load_data(channels(indx).fname, nimg));
      elseif (prev_frame ~= nimg)
        orig_img = double(load_data(channels(indx).fname, nimg));
        img_next = double(load_data(channels(indx).fname, nimg+1));
      end

      img = orig_img;

      if (channels(indx).detrend)
        img = imdetrend(img, opts.filtering.detrend_meshpoints);
      end

      if (channels(indx).cosmics)
        img = imcosmics(img, opts.filtering.cosmic_rays_window_size, opts.filtering.cosmic_rays_threshold);
      end

      if (channels(indx).hot_pixels)
        img = imhotpixels(img, opts.filtering.hot_pixels_threshold);
      end

      if (channels(indx).normalize)
        img = imnorm(img);
      end
    end

    switch handles.display(1)
      case 2
        img1 = orig_img;
      case 3
        if (channels(indx).normalize)
          img1 = (imnorm(orig_img) - img);
        else
          img1 = orig_img - img;
        end
      otherwise
        img1 = img;
    end

    switch handles.display(2)
      case 2
        img2 = img_next;
      case 3
        img2 = (orig_img - img_next);
      otherwise
        img2 = orig_img;
    end

    if (numel(handles.img) > 1 & all(ishandle(handles.img)))
      set(handles.img(1),'CData', img1);
      set(handles.img(2),'CData', img2);
    else

      handles.img = image(img1,'Parent', handles.axes(1),'CDataMapping', 'scaled');

      handles.img(2) = image(img2,'Parent', handles.axes(2),'CDataMapping', 'scaled');

      set(handles.axes,'Visible', 'off',  ...
                 'DataAspectRatio',  [1 1 1]);
    end

    set(hFig, 'Name', 'Channel Identification');
    set(handles.all_buttons, 'Enable', 'on');

    set(hFig, 'UserData',  handles);
    return
  end

  function channel_Callback(hObject, eventdata, handles)

    handles = get(hFig, 'UserData');
    set(handles.all_buttons, 'Enable', 'off');

    new_channel = convert_movie()

    if (~isempty(new_channel))
      channels(end+1) = get_struct('channel');
      channels(end).fname = new_channel;
      channels(end).type = 1;
      channels(end).compression = 1;

      liststring = [get(handles.list, 'String') '|Channel ' num2str(length(channels))];
      set(handles.list, 'String', liststring);
    end

    set(handles.all_buttons, 'Enable', 'on');

    set(hFig, 'UserData',  handles);

    return
  end

  function edit_options_Callback(hObject, eventdata, handles)

    handles = get(hFig, 'UserData');
    set(handles.all_buttons, 'Enable', 'off');
    drawnow;
    refresh(hFig);

    opts.filtering = edit_options(opts.filtering);

    set(handles.all_buttons, 'Enable', 'on');
    update_display(true, handles.current);

    return
  end

  function radio_Callback(hObject, eventdata, handles)

    handles = get(hFig, 'UserData');
    tmp_tag = get(eventdata.NewValue, 'tag');
    handles.display(str2double(tmp_tag(end-1))) = [str2double(tmp_tag(end))];
    set(hFig, 'UserData',  handles);

    update_display(false, handles.current);

    return
  end
 
  function detrend_Callback(hObject, eventdata, handles)

    handles = get(hFig, 'UserData');
    channels(handles.current).detrend = logical(get(hObject, 'Value'));
    set(hFig, 'UserData',  handles);

    update_display(true, handles.current);
    return
  end

  function norm_Callback(hObject, eventdata, handles)

    handles = get(hFig, 'UserData');
    channels(handles.current).normalize = logical(get(hObject, 'Value'));
    set(hFig, 'UserData',  handles);

    update_display(true, handles.current);
    return
  end

  function cosmics_Callback(hObject, eventdata, handles)

    handles = get(hFig, 'UserData');
    channels(handles.current).cosmics = logical(get(hObject, 'Value'));
    set(hFig, 'UserData',  handles);

    update_display(true, handles.current);
    return
  end

  function slider_Callback(hObject, eventdata, handles)

    handles = get(hFig, 'UserData');
    nimg = round(get(hObject, 'Value'));

    update_display(true, handles.current, nimg);
    return
  end

  function hotpix_Callback(hObject, eventdata, handles)

    handles = get(hFig, 'UserData');
    channels(handles.current).hot_pixels = logical(get(hObject, 'Value'));
    set(hFig, 'UserData',  handles);

    update_display(true, handles.current);
    return
  end

  function channel_color_Callback(hObject, eventdata, handles)

    handles = get(hFig, 'UserData');
    indx = handles.current;

    channels(indx).color = uisetcolor(channels(indx).color);

    set(handles.channel_color, 'ForegroundColor',  channels(indx).color);
    rgb_color = round(channels(indx).color * 255);
    set(handles.channel_color, 'String', ['<HTML><BODY bgcolor = "rgb(' num2str(rgb_color(1)) ', ' num2str(rgb_color(2)) ', ' num2str(rgb_color(3)) ')">green background</BODY></HTML>'])

    set(hFig, 'UserData',  handles);
    return
  end

  function compress_type_Callback(hObject, eventdata, handles)

    handles = get(hFig, 'UserData');
    channels(handles.current).compression = get(hObject, 'Value');
    set(hFig, 'UserData',  handles);
    return
  end

  function channel_type_Callback(hObject, eventdata, handles)

    handles = get(hFig, 'UserData');
    channels(handles.current).type = get(hObject, 'Value');
    set(hFig, 'UserData',  handles);
    return
  end

  function channel_fig_CloseRequestFcn(hObject, eventdata, handles)

    handles = get(hFig,'UserData');
    nchannels = length(channels);

    contents = get(handles.channel_type,'String');
    ntypes = length(contents);
    compressions = get(handles.compress,'String');

    detrend = logical(zeros(nchannels,1));
    types = logical(zeros(nchannels,ntypes));
    colors = zeros(nchannels,3);

    for i=1:nchannels
      detrend(i) = channels(i).detrend;
      types(i,channels(i).type) = true;
      colors(i,:) = channels(i).color;
      channels(i).type = contents{channels(i).type};
      channels(i).compression = compressions{channels(i).compression};
    end

    ok = true;
    if (ok & any(detrend, 1))
      answer = questdlg('Some channels will be detrended, continue ?');
      ok = strcmp(answer,'Yes');
    end
    if (ok & size(unique(colors,'rows'),1)~=nchannels)
      answer = questdlg('Multiple channels have the same color, continue ?');
      ok = strcmp(answer,'Yes');
    end

    if (ok)
      uiresume(hFig);
    end

    return
  end

  function [hFig, handles] = create_figure(channels, nframes, exp_name)

    nchannels = length(channels);

    % Initialize the size of the movie, the possible types and compressions
    typestring = {'luminescence';'brightfield'; 'dic'; 'fluorescence'};
    %writer = loci.formats.out.OMETiffWriter;
    %typecompress = cell(writer.getCompressionTypes());
    typecompress = {'none', 'lzw', 'deflate', 'jpeg'};


    % Initialize the structure used for the interface
    liststring = '';
    for i = 1:nchannels

      % Build the displayed list
      liststring = [liststring 'Channel ' num2str(i)];
      if (i < nchannels)
        liststring = [liststring '|'];
      end

      % Set the currently selected type of data
      for j = 1:length(typestring)
        if (strcmp(channels(i).type, typestring{j}))
          channels(i).type = j;

          break;
        end
      end

      % If the type did not exist, use the first one
      if (ischar(channels(i).type))
        channels(i).type = 1;
      end

      % Set the compression type
      for j = 1:length(typecompress)
        if (strcmpi(channels(i).compression, typecompress{j}))
          channels(i).compression = j;

          break;
        end
      end

      % If none was found, choose the first one
      if (ischar(channels(i).compression))
        channels(i).compress = 1;
      end
    end

    nframes = size_data(channels(1).fname);
    exp_name = channels(1).fname;
    [junk, exp_name, junk] = fileparts(exp_name);
    [junk, exp_name, junk] = fileparts(exp_name);
    exp_name = regexprep(exp_name, ' ', '');


    % Create my own grayscale map for the image display
    mygray = [0:255]' / 255;
    mygray = [mygray mygray mygray];

    enabled = [];

    hFig = figure('PaperUnits', 'centimeters',  ...
                  'CloseRequestFcn', @channel_fig_CloseRequestFcn, ...
                  'Color',  [0.7 0.7 0.7], ...
                  'Colormap', mygray, ...
                  'MenuBar', 'none',  ...
                  'Name', 'Channel Identification',  ...
                  'NumberTitle', 'off',  ...
                  'Units', 'normalized', ...
                  'Position', [0 0 1 1], ...
                  'DeleteFcn', @empty, ...
                  'HandleVisibility', 'callback',  ...
                  'Tag', 'channel_fig',  ...
                  'UserData', [], ...
                  'Visible', 'off');

    hOK = uicontrol('Parent', hFig, ...
                    'Units', 'normalized',  ...
                    'Callback', @channel_fig_CloseRequestFcn, ...
                    'Position', [0.79 0.02 0.18 0.05], ...
                    'String', 'OK',  ...
                    'Tag', 'pushbutton11');
    enabled = [enabled hOK];

    hAdd = uicontrol('Parent', hFig, ...
                    'Units', 'normalized',  ...
                    'Callback', @channel_Callback, ...
                    'Position', [0.01 0.02 0.15 0.05], ...
                    'String', 'Add channel',  ...
                    'Tag', 'pushbutton12');
    enabled = [enabled hAdd];

    hText = uicontrol('Parent', hFig, ...
                      'Units', 'normalized',  ...
                      'Position', [0.2 0.93 0.09 0.025], ...
                      'String', 'Experiment name:',  ...
                      'BackgroundColor', get(hFig, 'Color'), ...
                      'FontSize', 12, ...
                      'Style', 'text',  ...
                      'Tag', 'text1');

    hName = uicontrol('Parent', hFig, ...
                      'Units', 'normalized',  ...
                      'Position', [0.3 0.93 0.5 0.05], ...
                      'String', exp_name,  ...
                      'FontSize', 12, ...
                      'Style', 'edit',  ...
                      'Tag', 'edit1');
    enabled = [enabled hName];

    hIndex = uicontrol('Parent', hFig, ...
                      'Units', 'normalized',  ...
                      'Position', [0.2 0.03 0.09 0.025], ...
                      'String', 'Frame #1',  ...
                      'BackgroundColor', get(hFig, 'Color'), ...
                      'FontSize', 12, ...
                      'Style', 'text',  ...
                      'Tag', 'text2');

    hFrame = uicontrol('Parent', hFig, ...
                    'Units', 'normalized',  ...
                    'Callback', @slider_Callback, ...
                    'Position', [0.3 0.03 0.35 0.025], ...
                    'Value', 1, ...
                    'SliderStep', [1 10]/nframes, ...
                    'Max', nframes-1, ...
                    'Min', 1, ...
                    'Style', 'slider', ...
                    'Tag', 'slider1');
    enabled = [enabled hFrame];

    hPanel = uipanel('Parent', hFig, ...
                     'Title', 'Channel 1',  ...
                     'Tag', 'uipanel',  ...
                     'Clipping', 'on',  ...
                     'Position', [0.12 0.11 0.87 0.8]);

    hAxes = axes('Parent', hPanel, ...
                 'Position', [0 0.1 0.43 0.9], ...
                 'DataAspectRatio', [1 1 1], ...
                 'Visible', 'off',  ...
                 'Tag', 'axes');

    hAxesNext = axes('Parent', hPanel, ...
                 'Position', [0.44 0.1 0.43 0.9], ...
                 'DataAspectRatio', [1 1 1], ...
                 'Visible', 'off',  ...
                 'Tag', 'axes');

    hRadio = uibuttongroup('Parent', hPanel, ...
                         'Units', 'normalized',  ...
                         'SelectionChangeFcn', @radio_Callback, ...
                         'Position', [0 0.05 0.43 0.05], ...
                         'tag', 'radio');

    hControl = uicontrol('Parent', hRadio, ...
                         'Units', 'normalized',  ...
                         'Position', [0.1 0.1 0.25 0.8], ...
                         'Style', 'radiobutton',  ...
                         'String', 'Filtered image', ...
                         'Tag', 'radio11');
    enabled = [enabled hControl];

    hControl = uicontrol('Parent', hRadio, ...
                         'Units', 'normalized',  ...
                         'Position', [0.4 0.1 0.25 0.8], ...
                         'Style', 'radiobutton',  ...
                         'String', 'Raw image', ...
                         'Tag', 'radio12');
    enabled = [enabled hControl];

    hControl = uicontrol('Parent', hRadio, ...
                         'Units', 'normalized',  ...
                         'Position', [0.7 0.1 0.25 0.8], ...
                         'Style', 'radiobutton',  ...
                         'String', 'Difference', ...
                         'Tag', 'radio13');
    enabled = [enabled hControl];


    hRadio = uibuttongroup('Parent', hPanel, ...
                         'Units', 'normalized',  ...
                         'SelectionChangeFcn', @radio_Callback, ...
                         'Position', [0.44 0.05 0.43 0.05], ...
                         'tag', 'radio');

    hControl = uicontrol('Parent', hRadio, ...
                         'Units', 'normalized',  ...
                         'Position', [0.1 0.1 0.25 0.8], ...
                         'Style', 'radiobutton',  ...
                         'String', 'Current frame', ...
                         'Tag', 'radio21');
    enabled = [enabled hControl];

    hControl = uicontrol('Parent', hRadio, ...
                         'Units', 'normalized',  ...
                         'Position', [0.4 0.1 0.25 0.8], ...
                         'Style', 'radiobutton',  ...
                         'String', 'Next frame', ...
                         'Tag', 'radio22');
    enabled = [enabled hControl];

    hControl = uicontrol('Parent', hRadio, ...
                         'Units', 'normalized',  ...
                         'Position', [0.7 0.1 0.25 0.8], ...
                         'Style', 'radiobutton',  ...
                         'String', 'Difference', ...
                         'Tag', 'radio23');
    enabled = [enabled hControl];

    hChannel = uicontrol('Parent', hFig, ...
                         'Units', 'normalized',  ...
                         'Callback', @list_Callback, ...
                         'Position', [0.01 0.11 0.1 0.79], ...
                         'String', liststring, ...
                         'Style', 'listbox',  ...
                         'Value', 1, ...
                         'Tag', 'channel_list');
    enabled = [enabled hChannel];


    hText = uicontrol('Parent', hPanel, ...
                      'Units', 'normalized',  ...
                      'Position', [0.9 0.925 0.05 0.05], ...
                      'String', 'Channel:',  ...
                      'FontSize', 12, ...
                      'FontWeight', 'bold', ...
                      'Style', 'text',  ...
                      'Tag', 'text16');

    hText = uicontrol('Parent', hPanel, ...
                      'Units', 'normalized',  ...
                      'Position', [0.9 0.875 0.05 0.05], ...
                      'String', 'Type',  ...
                      'Style', 'text',  ...
                      'Tag', 'text17');

    hType = uicontrol('Parent', hPanel, ...
                      'Units', 'normalized',  ...
                      'Callback', @channel_type_Callback, ...
                      'Position', [0.875 0.845 0.1 0.05], ...
                      'String', typestring, ...
                      'Style', 'popupmenu',  ...
                      'Value', 1, ...
                      'Tag', 'channel_type');
    enabled = [enabled hType];

    hText = uicontrol('Parent', hPanel, ...
                      'Units', 'normalized',  ...
                      'Position', [0.9 0.79 0.05 0.05], ...
                      'String', 'Color',  ...
                      'Style', 'text',  ...
                      'Tag', 'text18');

    hColor = uicontrol('Parent', hPanel, ...
                       'Units', 'normalized',  ...
                       'Callback', @channel_color_Callback, ...
                       'Position', [0.9 0.765 0.05 0.05], ...
                       'Style', 'pushbutton',  ...
                       'FontSize', 80, ...
                       'String', 'Fluorophore color',  ...
                       'Tag', 'channel_color');
    enabled = [enabled hColor];

    hText = uicontrol('Parent', hPanel, ...
                      'Units', 'normalized',  ...
                      'Position', [0.89 0.69 0.075 0.05], ...
                      'String', 'Compression',  ...
                      'Style', 'text',  ...
                      'Tag', 'text19');

    hCompress = uicontrol('Parent', hPanel, ...
                          'Units', 'normalized',  ...
                          'Callback', @compress_type_Callback, ...
                          'Position', [0.89 0.655 0.075 0.05], ...
                          'String', typecompress, ...
                          'Style', 'popupmenu',  ...
                          'Value', 1, ...
                          'Tag', 'channel_type');
    enabled = [enabled hCompress];

    hText = uicontrol('Parent', hPanel, ...
                      'Units', 'normalized',  ...
                      'Position', [0.9 0.525 0.05 0.05], ...
                      'String', 'Filters:',  ...
                      'FontSize', 12, ...
                      'FontWeight', 'bold', ...
                      'Style', 'text',  ...
                      'Tag', 'text16');

    hDetrend = uicontrol('Parent', hPanel, ...
                         'Units', 'normalized',  ...
                         'Callback', @detrend_Callback, ...
                         'Position', [0.9 0.5 0.1 0.05], ...
                         'String', 'Detrend',  ...
                         'Style', 'checkbox',  ...
                         'Tag', 'detrend');
    enabled = [enabled hDetrend];

    hCosmics = uicontrol('Parent', hPanel, ...
                           'Units', 'normalized',  ...
                           'Callback', @cosmics_Callback, ...
                           'Position', [0.9 0.45 0.1 0.05], ...
                           'String', 'Cosmic rays',  ...
                           'Style', 'checkbox',  ...
                           'Tag', 'cosmics');
    enabled = [enabled hCosmics];


    hHotPixels = uicontrol('Parent', hPanel, ...
                         'Units', 'normalized',  ...
                         'Callback', @hotpix_Callback, ...
                         'Position', [0.9 0.4 0.1 0.05], ...
                         'String', 'Hot pixels',  ...
                         'Style', 'checkbox',  ...
                         'Tag', 'hot_pixels');
    enabled = [enabled hHotPixels];

    hNorm = uicontrol('Parent', hPanel, ...
                           'Units', 'normalized',  ...
                           'Callback', @norm_Callback, ...
                           'Position', [0.9 0.35 0.1 0.05], ...
                           'String', 'Normalize',  ...
                           'Style', 'checkbox',  ...
                           'Tag', 'normalize');
    enabled = [enabled hNorm];

    hEdit = uicontrol('Parent', hPanel, ...
                       'Units', 'normalized',  ...
                       'Callback', @edit_options_Callback, ...
                       'Position', [0.89 0.3 0.08 0.04], ...
                       'Style', 'pushbutton',  ...
                       'FontSize', 10, ...
                       'String', 'Edit parameters',  ...
                       'Tag', 'edit_options');
    enabled = [enabled hEdit];

    handles = struct('uipanel', hPanel, ...
                     'slider', hFrame, ...
                     'text', hIndex, ...
                     'detrend', hDetrend, ...
                     'list', hChannel, ...
                     'hot_pixels', hHotPixels, ...
                     'cosmics', hCosmics, ...
                     'normalize', hNorm, ...
                     'channel_color', hColor, ...
                     'channel_type', hType, ...
                     'compress', hCompress, ...
                     'axes', [hAxes hAxesNext], ...
                     'experiment', hName, ...
                     'all_buttons', enabled, ...
                     'img', -1, ...
                     'frame', -1, ...
                     'display', [1 1], ...
                     'current', -1);

    return;
  end
end
